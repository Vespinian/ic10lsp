use std::fmt::Display;

use phf::{phf_map, phf_set};

#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub(crate) enum DataType {
    Number,
    Id,
    Register,
    Device,
    LogicType,
    SlotLogicType,
    Name,
    BatchMode,
    ReagentMode,
}

#[derive(Debug)]
pub(crate) struct Union<'a>(pub(crate) &'a [DataType], pub(crate) &'a str);

#[derive(Debug)]
pub(crate) struct InstructionSignature(pub(crate) &'static [Union<'static>]);

const REGISTER: Union = Union(&[DataType::Register], "");
const NUMBER: Union = Union(&[DataType::Number], "num");
const NAME: Union = Union(&[DataType::Name], "str");
const DEVICE_IDENTIFIER: Union = Union(&[DataType::Device], "");
const DEVICE: Union = Union(
    &[DataType::Device, DataType::Register, DataType::Id],
    "device",
);
const ID: Union = Union(&[DataType::Register, DataType::Id, DataType::Number], "id");
const VALUE: Union = Union(&[DataType::Register, DataType::Number], "value");
const ALIAS: Union = Union(&[DataType::Register, DataType::Device], "");
const INT: Union = Union(&[DataType::Register, DataType::Number], "int");
const NAME_HASH: Union = Union(&[DataType::Register, DataType::Number], "nameHash");
const REAGENT_HASH: Union = Union(&[DataType::Register, DataType::Number], "reagentHash");
const DEVICE_HASH: Union = Union(&[DataType::Register, DataType::Number], "deviceHash");
const LETTERED_VALUE: Union = Union(&[DataType::Register, DataType::Number], "a");
const SLOT_INDEX: Union = Union(&[DataType::Register, DataType::Number], "slotIndex");
const ADDRESS: Union = Union(&[DataType::Register, DataType::Number], "address");
const LOGIC_TYPE: Union = Union(&[DataType::LogicType], "logicType");
const SLOT_LOGIC_TYPE: Union = Union(&[DataType::SlotLogicType], "slotLogicType");
const BATCH_MODE: Union = Union(
    &[DataType::BatchMode, DataType::Number, DataType::Register],
    "batchMode",
);
const REAGENT_MODE: Union = Union(
    &[DataType::ReagentMode, DataType::Number, DataType::Register],
    "reagentMode",
);

pub(crate) const INSTRUCTIONS: phf::Map<&'static str, InstructionSignature> = phf_map! {
    "abs" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "acos" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "add" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "alias" => InstructionSignature(&[NAME, ALIAS]),
    "and" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "asin" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "atan" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "atan2" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "bap" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bapal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bapz" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bapzal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bdns" => InstructionSignature(&[DEVICE, LETTERED_VALUE]),
    "bdnsal" => InstructionSignature(&[DEVICE, LETTERED_VALUE]),
    "bdnvl" => InstructionSignature(&[DEVICE, LOGIC_TYPE, LETTERED_VALUE]),
    "bdnvs" => InstructionSignature(&[DEVICE, LOGIC_TYPE, LETTERED_VALUE]),
    "bdse" => InstructionSignature(&[DEVICE, LETTERED_VALUE]),
    "bdseal" => InstructionSignature(&[DEVICE, LETTERED_VALUE]),
    "beq" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "beqal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "beqz" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "beqzal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "bge" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bgeal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bgez" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "bgezal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "bgt" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bgtal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bgtz" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "bgtzal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "ble" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bleal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "blez" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "blezal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "blt" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bltal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bltz" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "bltzal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "bna" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bnaal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bnan" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "bnaz" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bnazal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bne" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bneal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "bnez" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "bnezal" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "brap" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "brapz" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "brdns" => InstructionSignature(&[DEVICE, LETTERED_VALUE]),
    "brdse" => InstructionSignature(&[DEVICE, LETTERED_VALUE]),
    "breq" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "breqz" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "brge" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "brgez" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "brgt" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "brgtz" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "brle" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "brlez" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "brlt" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "brltz" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "brna" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "brnan" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "brnaz" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "brne" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "brnez" => InstructionSignature(&[LETTERED_VALUE, LETTERED_VALUE]),
    "ceil" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "clr" => InstructionSignature(&[DEVICE_IDENTIFIER]),
    "clrd" => InstructionSignature(&[ID]),
    "cos" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "define" => InstructionSignature(&[NAME, NUMBER]),
    "div" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "exp" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "ext" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "floor" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "get" => InstructionSignature(&[REGISTER, DEVICE, ADDRESS]),
    "getd" => InstructionSignature(&[REGISTER, ID, ADDRESS]),
    "hcf" => InstructionSignature(&[]),
    "ins" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "j" => InstructionSignature(&[INT]),
    "jal" => InstructionSignature(&[INT]),
    "jr" => InstructionSignature(&[INT]),
    "l" => InstructionSignature(&[REGISTER, DEVICE, LOGIC_TYPE]),
    "label" => InstructionSignature(&[DEVICE_IDENTIFIER, NAME]),
    "lb" => InstructionSignature(&[REGISTER, DEVICE_HASH, LOGIC_TYPE, BATCH_MODE]),
    "lbn" => InstructionSignature(&[REGISTER, DEVICE_HASH, NAME_HASH, LOGIC_TYPE, BATCH_MODE]),
    "lbns" => InstructionSignature(&[REGISTER, DEVICE_HASH, NAME_HASH, SLOT_INDEX, SLOT_LOGIC_TYPE, BATCH_MODE]),
    "lbs" => InstructionSignature(&[REGISTER, DEVICE_HASH, SLOT_INDEX, SLOT_LOGIC_TYPE, BATCH_MODE]),
    "ld" => InstructionSignature(&[REGISTER, ID, LOGIC_TYPE]),
    "lerp" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "log" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "lr" => InstructionSignature(&[REGISTER, DEVICE, REAGENT_MODE, INT]),
    "ls" => InstructionSignature(&[REGISTER, DEVICE, SLOT_INDEX, SLOT_LOGIC_TYPE]),
    "max" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "min" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "mod" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "move" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "mul" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "nor" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "not" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "or" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "peek" => InstructionSignature(&[REGISTER]),
    "poke" => InstructionSignature(&[ADDRESS, VALUE]),
    "pop" => InstructionSignature(&[REGISTER]),
    "pow" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "push" => InstructionSignature(&[LETTERED_VALUE]),
    "put" => InstructionSignature(&[DEVICE, ADDRESS, VALUE]),
    "putd" => InstructionSignature(&[ID, ADDRESS, VALUE]),
    "rand" => InstructionSignature(&[REGISTER]),
    "rmap" => InstructionSignature(&[REGISTER, DEVICE_IDENTIFIER, REAGENT_HASH]),
    "round" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "s" => InstructionSignature(&[DEVICE, LOGIC_TYPE, VALUE]),
    "sap" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "sapz" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "sb" => InstructionSignature(&[DEVICE_HASH, LOGIC_TYPE, VALUE]),
    "sbn" => InstructionSignature(&[DEVICE_HASH, NAME_HASH, LOGIC_TYPE, VALUE]),
    "sbs" => InstructionSignature(&[DEVICE_HASH, SLOT_INDEX, SLOT_LOGIC_TYPE, VALUE]),
    "sd" => InstructionSignature(&[ID, LOGIC_TYPE, VALUE]),
    "sdns" => InstructionSignature(&[REGISTER, DEVICE]),
    "sdse" => InstructionSignature(&[REGISTER, DEVICE]),
    "select" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "seq" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "seqz" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "sge" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "sgez" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "sgt" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "sgtz" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "sin" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "sla" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "sle" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "sleep" => InstructionSignature(&[LETTERED_VALUE]),
    "slez" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "sll" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "slt" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "sltz" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "sna" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE, LETTERED_VALUE]),
    "snan" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "snanz" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "snaz" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "sne" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "snez" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "sqrt" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "sra" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "srl" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "ss" => InstructionSignature(&[DEVICE, SLOT_INDEX, SLOT_LOGIC_TYPE, VALUE]),
    "sub" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "tan" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "trunc" => InstructionSignature(&[REGISTER, LETTERED_VALUE]),
    "xor" => InstructionSignature(&[REGISTER, LETTERED_VALUE, LETTERED_VALUE]),
    "yield" => InstructionSignature(&[]),
};

pub(crate) const LOGIC_TYPES: phf::Set<&'static str> = phf_set! {
    "Acceleration",
    "Activate",
    "AirRelease",
    "AlignmentError",
    "Altitude",
    "Apex",
    "AutoLand",
    "AutoShutOff",
    "BestContactFilter",
    "Bpm",
    "BurnTimeRemaining",
    "CelestialHash",
    "CelestialParentHash",
    "Channel0",
    "Channel1",
    "Channel2",
    "Channel3",
    "Channel4",
    "Channel5",
    "Channel6",
    "Channel7",
    "Charge",
    "Chart",
    "ChartedNavPoints",
    "ClearMemory",
    "CollectableGoods",
    "Color",
    "Combustion",
    "CombustionInput",
    "CombustionInput2",
    "CombustionLimiter",
    "CombustionOutput",
    "CombustionOutput2",
    "CompletionRatio",
    "ContactTypeId",
    "CurrentCode",
    "CurrentResearchPodType",
    "Density",
    "DerivativeGain",
    "DestinationCode",
    "Discover",
    "DistanceAu",
    "DistanceKm",
    "DrillCondition",
    "DryMass",
    "Eccentricity",
    "ElevatorLevel",
    "ElevatorSpeed",
    "EntityState",
    "EnvironmentEfficiency",
    "Error",
    "ExhaustVelocity",
    "ExportCount",
    "ExportQuantity",
    "ExportSlotHash",
    "ExportSlotOccupant",
    "Extended",
    "Filtration",
    "FlightControlRule",
    "Flush",
    "ForceWrite",
    "ForwardX",
    "ForwardY",
    "ForwardZ",
    "Fuel",
    "Harvest",
    "Horizontal",
    "HorizontalRatio",
    "Idle",
    "ImportCount",
    "ImportQuantity",
    "ImportSlotHash",
    "ImportSlotOccupant",
    "Inclination",
    "Index",
    "IntegralGain",
    "InterrogationProgress",
    "LineNumber",
    "Lock",
    "ManualResearchRequiredPod",
    "Mass",
    "Maximum",
    "MineablesInQueue",
    "MineablesInVicinity",
    "MinedQuantity",
    "Minimum",
    "MinimumWattsToContact",
    "Mode",
    "NameHash",
    "NavPoints",
    "NetworkFault",
    "NextWeatherEventTime",
    "None",
    "On",
    "Open",
    "OperationalTemperatureEfficiency",
    "OrbitPeriod",
    "Orientation",
    "Output",
    "PassedMoles",
    "Plant",
    "PlantEfficiency1",
    "PlantEfficiency2",
    "PlantEfficiency3",
    "PlantEfficiency4",
    "PlantGrowth1",
    "PlantGrowth2",
    "PlantGrowth3",
    "PlantGrowth4",
    "PlantHash1",
    "PlantHash2",
    "PlantHash3",
    "PlantHash4",
    "PlantHealth1",
    "PlantHealth2",
    "PlantHealth3",
    "PlantHealth4",
    "PositionX",
    "PositionY",
    "PositionZ",
    "Power",
    "PowerActual",
    "PowerGeneration",
    "PowerPotential",
    "PowerRequired",
    "PrefabHash",
    "Pressure",
    "PressureEfficiency",
    "PressureExternal",
    "PressureInput",
    "PressureInput2",
    "PressureInternal",
    "PressureOutput",
    "PressureOutput2",
    "PressureSetting",
    "Progress",
    "ProportionalGain",
    "Quantity",
    "Ratio",
    "RatioCarbonDioxide",
    "RatioCarbonDioxideInput",
    "RatioCarbonDioxideInput2",
    "RatioCarbonDioxideOutput",
    "RatioCarbonDioxideOutput2",
    "RatioHydrogen",
    "RatioLiquidCarbonDioxide",
    "RatioLiquidCarbonDioxideInput",
    "RatioLiquidCarbonDioxideInput2",
    "RatioLiquidCarbonDioxideOutput",
    "RatioLiquidCarbonDioxideOutput2",
    "RatioLiquidHydrogen",
    "RatioLiquidNitrogen",
    "RatioLiquidNitrogenInput",
    "RatioLiquidNitrogenInput2",
    "RatioLiquidNitrogenOutput",
    "RatioLiquidNitrogenOutput2",
    "RatioLiquidNitrousOxide",
    "RatioLiquidNitrousOxideInput",
    "RatioLiquidNitrousOxideInput2",
    "RatioLiquidNitrousOxideOutput",
    "RatioLiquidNitrousOxideOutput2",
    "RatioLiquidOxygen",
    "RatioLiquidOxygenInput",
    "RatioLiquidOxygenInput2",
    "RatioLiquidOxygenOutput",
    "RatioLiquidOxygenOutput2",
    "RatioLiquidPollutant",
    "RatioLiquidPollutantInput",
    "RatioLiquidPollutantInput2",
    "RatioLiquidPollutantOutput",
    "RatioLiquidPollutantOutput2",
    "RatioLiquidVolatiles",
    "RatioLiquidVolatilesInput",
    "RatioLiquidVolatilesInput2",
    "RatioLiquidVolatilesOutput",
    "RatioLiquidVolatilesOutput2",
    "RatioNitrogen",
    "RatioNitrogenInput",
    "RatioNitrogenInput2",
    "RatioNitrogenOutput",
    "RatioNitrogenOutput2",
    "RatioNitrousOxide",
    "RatioNitrousOxideInput",
    "RatioNitrousOxideInput2",
    "RatioNitrousOxideOutput",
    "RatioNitrousOxideOutput2",
    "RatioOxygen",
    "RatioOxygenInput",
    "RatioOxygenInput2",
    "RatioOxygenOutput",
    "RatioOxygenOutput2",
    "RatioPollutant",
    "RatioPollutantInput",
    "RatioPollutantInput2",
    "RatioPollutantOutput",
    "RatioPollutantOutput2",
    "RatioPollutedWater",
    "RatioSteam",
    "RatioSteamInput",
    "RatioSteamInput2",
    "RatioSteamOutput",
    "RatioSteamOutput2",
    "RatioVolatiles",
    "RatioVolatilesInput",
    "RatioVolatilesInput2",
    "RatioVolatilesOutput",
    "RatioVolatilesOutput2",
    "RatioWater",
    "RatioWaterInput",
    "RatioWaterInput2",
    "RatioWaterOutput",
    "RatioWaterOutput2",
    "ReEntryAltitude",
    "Reagents",
    "RecipeHash",
    "ReferenceId",
    "RequestHash",
    "RequiredPower",
    "Reset",
    "ReturnFuelCost",
    "Richness",
    "Rpm",
    "SemiMajorAxis",
    "Setpoint",
    "Setting",
    "SettingInput",
    "SettingOutput",
    "SignalID",
    "SignalStrength",
    "Sites",
    "Size",
    "SizeX",
    "SizeY",
    "SizeZ",
    "SolarAngle",
    "SolarIrradiance",
    "SoundAlert",
    "StackSize",
    "Stress",
    "Survey",
    "TargetPadIndex",
    "TargetPrefabHash",
    "TargetSlotIndex",
    "TargetX",
    "TargetY",
    "TargetZ",
    "Temperature",
    "TemperatureDifferentialEfficiency",
    "TemperatureExternal",
    "TemperatureInput",
    "TemperatureInput2",
    "TemperatureOutput",
    "TemperatureOutput2",
    "TemperatureSetting",
    "Throttle",
    "Thrust",
    "ThrustToWeight",
    "Time",
    "TimeToDestination",
    "TotalMoles",
    "TotalMolesInput",
    "TotalMolesInput2",
    "TotalMolesOutput",
    "TotalMolesOutput2",
    "TotalQuantity",
    "TrueAnomaly",
    "VelocityMagnitude",
    "VelocityRelativeX",
    "VelocityRelativeY",
    "VelocityRelativeZ",
    "VelocityX",
    "VelocityY",
    "VelocityZ",
    "Vertical",
    "VerticalRatio",
    "Volume",
    "VolumeOfLiquid",
    "WattsReachingContact",
    "Weight",
    "WorkingGasEfficiency",
};

pub(crate) const SLOT_LOGIC_TYPES: phf::Set<&'static str> = phf_set! {
    "Charge",
    "ChargeRatio",
    "Class",
    "Damage",
    "Efficiency",
    "FilterType",
    "Growth",
    "HarvestedHash",
    "Health",
    "LineNumber",
    "Lock",
    "Mature",
    "MaturityRatio",
    "MaxQuantity",
    "Mode",
    "None",
    "OccupantHash",
    "Occupied",
    "On",
    "Open",
    "PrefabHash",
    "Pressure",
    "PressureAir",
    "PressureWaste",
    "Quantity",
    "ReferenceId",
    "Seeding",
    "SeedingRatio",
    "SortingClass",
    "Temperature",
    "Volume",
};

pub(crate) const BATCH_MODES: phf::Set<&'static str> = phf_set! {
    "Average",
    "Sum",
    "Minimum",
    "Maximum",
};

pub(crate) const BATCH_MODE_LOOKUP: phf::Map<u8, &'static str> = phf_map! {
    0u8 => "Average",
    1u8 => "Sum",
    2u8 => "Minimum",
    3u8 => "Maximum",
};

pub(crate) const REAGENT_MODES: phf::Set<&'static str> = phf_set! {
    "Contents",
    "Required",
    "Recipe",
    "TotalContents",
};

pub(crate) const REAGENT_MODE_LOOKUP: phf::Map<u8, &'static str> = phf_map! {
    0u8 => "Contents",
    1u8 => "Required",
    2u8 => "Recipe",
    3u8 => "TotalContents",
};

impl Display for DataType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let val = match *self {
            DataType::Number => "num",
            DataType::Id => "id",
            DataType::Register => "r?",
            DataType::Device => "d?",
            DataType::LogicType => "logicType",
            DataType::SlotLogicType => "slotType",
            DataType::Name => "name",
            DataType::BatchMode => "batchMode",
            DataType::ReagentMode => "reagentMode",
        };
        write!(f, "{}", val)
    }
}

impl Display for InstructionSignature {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut idx = 0;
        for parameter in self.0 {
            let mut param_str = parameter.to_string();
            let mut first_char = param_str.remove(0);
            if first_char == 'a' {
                first_char = (first_char as u8 + idx) as char;
                idx = idx + 1;
            }
            param_str.insert(0, first_char);
            write!(f, " {param_str}")?;
        }
        Ok(())
    }
}

impl<'a> Display for Union<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let has_parens = self.0.len() != 1;
        if has_parens {
            write!(f, "{}(", self.1)?;
        }
        let mut first = true;
        for item in self.0.iter() {
            if !first {
                write!(f, "|")?;
            }
            first = false;
            item.fmt(f)?;
        }
        if has_parens {
            write!(f, ")")?;
        }
        Ok(())
    }
}

impl<'a> From<&'a [DataType]> for Union<'a> {
    fn from(value: &'a [DataType]) -> Self {
        Union(value, "")
    }
}

impl<'a> Union<'a> {
    pub(crate) fn match_type(&self, typ: DataType) -> bool {
        for x in self.0 {
            if *x == typ {
                return true;
            }
        }
        false
    }

    pub(crate) fn match_union(&self, types: &Union) -> bool {
        for typ in self.0 {
            for typ2 in types.0 {
                if typ == typ2 {
                    return true;
                }
            }
        }
        false
    }

    pub(crate) fn intersection(&self, other: &[DataType]) -> Vec<DataType> {
        self.0
            .iter()
            .filter(|x| other.contains(x))
            .map(Clone::clone)
            .collect()
    }
}

pub(crate) fn logictype_candidates(text: &str) -> Vec<DataType> {
    let mut ret = Vec::with_capacity(3);

    if LOGIC_TYPES.contains(text) {
        ret.push(DataType::LogicType);
    }
    if SLOT_LOGIC_TYPES.contains(text) {
        ret.push(DataType::SlotLogicType);
    }
    if BATCH_MODES.contains(text) {
        ret.push(DataType::BatchMode);
    }
    if REAGENT_MODES.contains(text) {
        ret.push(DataType::ReagentMode);
    }

    ret
}

// Taken directly from the game's rocketstation_Data/StreamingAssets/Language/english.xml
// with slight changes
pub(crate) const INSTRUCTION_DOCS: phf::Map<&'static str, &'static str> = phf_map! {
    "abs" => "Register = the absolute value of a",
    "acos" => "Returns the cosine of the specified angle (radians)",
    "add" => "Register = a + b.",
    "alias" => "Labels register or device reference with name, device references also affect what shows on the screws on the IC base.",
    "and" => "Performs a bitwise logical AND operation on the binary representation of two values. Each bit of the result is determined by evaluating the corresponding bits of the input values. If both bits are 1, the resulting bit is set to 1. Otherwise the resulting bit is set to 0.",
    "asin" => "Returns the angle (radians) whos sine is the specified value",
    "atan" => "Returns the angle (radians) whos tan is the specified value",
    "atan2" => "Returns the angle (radians) whose tangent is the quotient of two specified values: a (y) and b (x)",
    "bap" => "Branch to line d if abs(a - b) <= max(c * max(abs(a), abs(b)), float.epsilon * 8)",
    "bapal" => "Branch to line c if a != b and store next line number in ra",
    "bapz" => "Branch to line c if abs(a) <= float.epsilon * 8",
    "bapzal" => "Branch to line c if abs(a) <= float.epsilon * 8",
    "bdns" => "Branch to line a if device d isn't set",
    "bdnsal" => "Jump execution to line a and store next line number if device is not set",
    "bdnvl" => "Will branch to line a if the provided device not valid for a load instruction for the provided logic type.",
    "bdnvs" => "Will branch to line a if the provided device not valid for a store instruction for the provided logic type.",
    "bdse" => "Branch to line a if device d is set",
    "bdseal" => "Jump execution to line a and store next line number if device is set",
    "beq" => "Branch to line c if a == b",
    "beqal" => "Branch to line c if a == b and store next line number in ra",
    "beqz" => "Branch to line b if a == 0",
    "beqzal" => "Branch to line b if a == 0 and store next line number in ra",
    "bge" => "Branch to line c if a >= b",
    "bgeal" => "Branch to line c if a >= b and store next line number in ra",
    "bgez" => "Branch to line b if a >= 0",
    "bgezal" => "Branch to line b if a >= 0 and store next line number in ra",
    "bgt" => "Branch to line c if a > b",
    "bgtal" => "Branch to line c if a > b and store next line number in ra",
    "bgtz" => "Branch to line b if a > 0",
    "bgtzal" => "Branch to line b if a > 0 and store next line number in ra",
    "ble" => "Branch to line c if a <= b",
    "bleal" => "Branch to line c if a <= b and store next line number in ra",
    "blez" => "Branch to line b if a <= 0",
    "blezal" => "Branch to line b if a <= 0 and store next line number in ra",
    "blt" => "Branch to line c if a < b",
    "bltal" => "Branch to line c if a < b and store next line number in ra",
    "bltz" => "Branch to line b if a < 0",
    "bltzal" => "Branch to line b if a < 0 and store next line number in ra",
    "bna" => "Branch to line d if abs(a - b) > max(c * max(abs(a), abs(b)), float.epsilon * 8)",
    "bnaal" => "Branch to line d if abs(a - b) <= max(c * max(abs(a), abs(b)), float.epsilon * 8) and store next line number in ra",
    "bnan" => "Branch to line b if a is not a number (NaN)",
    "bnaz" => "Branch to line c if abs(a) > float.epsilon * 8",
    "bnazal" => "Branch to line c if abs(a) > float.epsilon * 8",
    "bne" => "Branch to line c if a != b",
    "bneal" => "Branch to line c if a != b and store next line number in ra",
    "bnez" => "branch to line b if a != 0",
    "bnezal" => "Branch to line b if a != 0 and store next line number in ra",
    "brap" => "Relative branch to line d if abs(a - b) <= max(c * max(abs(a), abs(b)), float.epsilon * 8)",
    "brapz" => "Relative branch to line c if abs(a) <= float.epsilon * 8",
    "brdns" => "Relative jump to line a if device is not set",
    "brdse" => "Relative jump to line a if device is set",
    "breq" => "Relative branch to line c if a == b",
    "breqz" => "Relative branch to line b if a == 0",
    "brge" => "Relative jump to line c if a >= b",
    "brgez" => "Relative branch to line b if a >= 0",
    "brgt" => "relative jump to line c if a > b",
    "brgtz" => "Relative branch to line b if a > 0",
    "brle" => "Relative jump to line c if a <= b",
    "brlez" => "Relative branch to line b if a <= 0",
    "brlt" => "Relative jump to line c if a < b",
    "brltz" => "Relative branch to line b if a < 0",
    "brna" => "Relative branch to line d if abs(a - b) > max(c * max(abs(a), abs(b)), float.epsilon * 8)",
    "brnan" => "Relative branch to line b if a is not a number (NaN)",
    "brnaz" => "Relative branch to line c if abs(a) > float.epsilon * 8",
    "brne" => "Relative branch to line c if a != b",
    "brnez" => "Relative branch to line b if a != 0",
    "ceil" => "Register = smallest integer greater than a",
    "clr" => "Clears the stack memory for the provided device.",
    "clrd" => "Seeks directly for the provided device id and clears the stack memory of that device",
    "cos" => "Returns the cosine of the specified angle (radians)",
    "define" => "Creates a label that will be replaced throughout the program with the provided value.",
    "div" => "Register = a / b",
    "exp" => "Register = exp(a)",
    "ext" => "Extracts a bit field from a, beginning at b for c length and placed in the provided register. Payload cannot exceed 53 bits in final length.",
    "floor" => "Register = largest integer less than a",
    "get" => "Using the provided device, attempts to read the stack value at the provided address, and places it in the register.",
    "getd" => "Seeks directly for the provided device id, attempts to read the stack value at the provided address, and places it in the register.",
    "hcf" => "Halt and catch fire",
    //TODO: might need to change when rocketwerks fixes either the description or the instruction
    "ins" => "Inserts a bit field of c into the provided register, beginning at a for b length. Payload cannot exceed 53 bits in final length.",
    "j" => "Jump execution to line a",
    "jal" => "Jump execution to line a and store next line number in ra",
    "jr" => "Relative jump to line a",
    "l" => "Loads device LogicType to register by housing index value.",
    "label" => "DEPRECATED",
    "lb" => "Loads LogicType from all output network devices with provided type hash using the provide batch mode. Average (0), Sum (1), Minimum (2), Maximum (3). Can use either the word, or the number.",
    "lbn" => "Loads LogicType from all output network devices with provided type and name hashes using the provide batch mode. Average (0), Sum (1), Minimum (2), Maximum (3). Can use either the word, or the number.",
    "lbns" => "Loads LogicSlotType from slotIndex from all output network devices with provided type and name hashes using the provide batch mode. Average (0), Sum (1), Minimum (2), Maximum (3). Can use either the word, or the number.",
    "lbs" => "Loads LogicSlotType from slotIndex from all output network devices with provided type hash using the provide batch mode. Average (0), Sum (1), Minimum (2), Maximum (3). Can use either the word, or the number.",
    "ld" => "Loads device LogicType to register by direct ID reference.",
    "lerp" => "Linearly interpolates between a and b by the ratio c, and places the result in the register provided. The ratio c will be clamped between 0 and 1.",
    "log" => "Register = log(a)",
    "lr" => "Loads reagent of device's ReagentMode where a hash of the reagent type to check for. ReagentMode can be either Contents (0), Required (1), Recipe (2). Can use either the word, or the number.",
    "ls" => "Loads slot LogicSlotType on device to register.",
    "max" => "Register = max of a or b",
    "min" => "Register = min of a or b",
    "mod" => "Register = a mod b (note: NOT a % b)",
    "move" => "Register = provided num or register value.",
    "mul" => "Register = a * b",
    "nor" => "Performs a bitwise logical NOR (NOT OR) operation on the binary representation of two values. Each bit of the result is determined by evaluating the corresponding bits of the input values. If both bits are 0, the resulting bit is set to 1. Otherwise, if at least one bit is 1, the resulting bit is set to 0.",
    "not" => "Performs a bitwise logical NOT operation flipping each bit of the input value, resulting in a binary complement. If a bit is 1, it becomes 0, and if a bit is 0, it becomes 1.",
    "or" => "Performs a bitwise logical OR operation on the binary representation of two values. Each bit of the result is determined by evaluating the corresponding bits of the input values. If either bit is 1, the resulting bit is set to 1. If both bits are 0, the resulting bit is set to 0.",
    "peek" => "Register = the value at the top of the stack",
    "poke" => "Stores the provided value at the provided address in the stack.",
    "pop" => "Register = the value at the top of the stack and decrements sp",
    "pow" => "Stores the result of raising a to the power of b in the register. Follows IEEE-754 standard for floating point arithmetic.",
    "push" => "Pushes the value of a to the stack at sp and increments sp",
    "put" => "Using the provided device, attempts to write the provided value to the stack at the provided address.",
    "putd" => "Seeks directly for the provided device id, attempts to write the provided value to the stack at the provided address.",
    "rand" => "Register = a random value x with 0 <= x < 1",
    "rmap" => "Given a reagent hash, store the corresponding prefab hash that the device expects to fulfill the reagent requirement. For example, on an autolathe, the hash for Iron will store the hash for ItemIronIngot.",
    "round" => "Register = a rounded to nearest integer",
    "s" => "Stores register value to LogicType on device by housing index value.",
    "sap" => "Register = 1 if abs(a - b) <= max(c * max(abs(a), abs(b)), float.epsilon * 8), otherwise 0",
    "sapz" => "Register = 1 if |a| <= float.epsilon * 8, otherwise 0",
    "sb" => "Stores register value to LogicType on all output network devices with provided type hash.",
    "sbn" => "Stores register value to LogicType on all output network devices with provided type hash and name.",
    "sbs" => "Stores register value to LogicSlotType on all output network devices with provided type hash in the provided slot.",
    "sd" => "Stores register value to LogicType on device by direct ID reference.",
    "sdns" => "Register = 1 if device is not set, otherwise 0",
    "sdse" => "Register = 1 if device is set, otherwise 0.",
    "select" => "Register = b if a is non-zero, otherwise c",
    "seq" => "Register = 1 if a == b, otherwise 0",
    "seqz" => "Register = 1 if a == 0, otherwise 0",
    "sge" => "Register = 1 if a >= b, otherwise 0",
    "sgez" => "Register = 1 if a >= 0, otherwise 0",
    "sgt" => "Register = 1 if a > b, otherwise 0",
    "sgtz" => "Register = 1 if a > 0, otherwise 0",
    "sin" => "Returns the sine of the specified angle (radians)",
    "sla" => "Performs a bitwise arithmetic left shift operation on the binary representation of a value. It shifts the bits to the left and fills the vacated rightmost bits with a copy of the sign bit (the most significant bit).",
    "sle" => "Register = 1 if a <= b, otherwise 0",
    "sleep" => "Pauses execution on the IC for a seconds",
    "slez" => "Register = 1 if a <= 0, otherwise 0",
    "sll" => "Performs a bitwise logical left shift operation on the binary representation of a value. It shifts the bits to the left and fills the vacated rightmost bits with zeros.",
    "slt" => "Register = 1 if a < b, otherwise 0",
    "sltz" => "Register = 1 if a < 0, otherwise 0",
    "sna" => "Register = 1 if abs(a - b) > max(c * max(abs(a), abs(b)), float.epsilon * 8), otherwise 0",
    "snan" => "Register = 1 if a is NaN, otherwise 0",
    "snanz" => "Register = 0 if a is NaN, otherwise 1",
    "snaz" => "Register = 1 if |a| > float.epsilon, otherwise 0",
    "sne" => "Register = 1 if a != b, otherwise 0",
    "snez" => "Register = 1 if a != 0, otherwise 0",
    "sqrt" => "Register = square root of a",
    "sra" => "Performs a bitwise arithmetic right shift operation on the binary representation of a value. It shifts the bits to the right and fills the vacated leftmost bits with a copy of the sign bit (the most significant bit).",
    "srl" => "Performs a bitwise logical right shift operation on the binary representation of a value. It shifts the bits to the right and fills the vacated leftmost bits with zeros",
    "ss" => "Stores register value to device stored in a slot LogicSlotType on device.",
    "sub" => "Register = a - b.",
    "tan" => "Returns the tan of the specified angle (radians) ",
    "trunc" => "Register = a with fractional part removed",
    "xor" => "Performs a bitwise logical XOR (exclusive OR) operation on the binary representation of two values. Each bit of the result is determined by evaluating the corresponding bits of the input values. If the bits are different (one bit is 0 and the other is 1), the resulting bit is set to 1. If the bits are the same (both 0 or both 1), the resulting bit is set to 0.",
    "yield" => "Pauses execution for 1 tick",
};

pub(crate) const LOGIC_TYPE_DOCS: phf::Map<&'static str, &'static str> = phf_map! {
    "Acceleration" => "Change in velocity. Rockets that are deccelerating when landing will show this as negative value.",
    "Activate" => "1 if device is activated (usually means running), otherwise 0",
    "AirRelease" => "The current state of the air release system, for example AirRelease = 1 for a Hardsuit sets Air Release to On",
    "AlignmentError" => "The angular discrepancy between the telescope's current orientation and the target. Indicates how 'off target' the telescope is. Returns NaN when no target.",
    "Altitude" => "The altitude that the rocket above the planet's surface. -1 if the rocket is in space.",
    "Apex" => "The lowest altitude that the rocket will reach before it starts travelling upwards again.",
    "AutoLand" => "Engages the automatic landing algorithm. The rocket will automatically throttle and turn on and off its engines to achieve a smooth landing.",
    "AutoShutOff" => "Turns off all devices in the rocket upon reaching destination",
    "BestContactFilter" => "Filters the satellite's auto selection of targets to a single reference ID.",
    "Bpm" => "Bpm",
    "BurnTimeRemaining" => "Estimated time in seconds until fuel is depleted. Calculated based on current fuel usage.",
    "CelestialHash" => "The current hash of the targeted celestial object.",
    "CelestialParentHash" => "The hash for the name of the parent the celestial is orbiting, 0 if there is no parent celestial.",
    "Channel0" => "Channel on a cable network which should be considered volatile",
    "Channel1" => "Channel on a cable network which should be considered volatile",
    "Channel2" => "Channel on a cable network which should be considered volatile",
    "Channel3" => "Channel on a cable network which should be considered volatile",
    "Channel4" => "Channel on a cable network which should be considered volatile",
    "Channel5" => "Channel on a cable network which should be considered volatile",
    "Channel6" => "Channel on a cable network which should be considered volatile",
    "Channel7" => "Channel on a cable network which should be considered volatile",
    "Charge" => "The current charge the device has",
    "Chart" => "Progress status of Chart scan at the rocket's target Space Map Location. Returns a clamped normalised value. If Chart scan is not available returns -1.",
    "ChartedNavPoints" => "The number of charted NavPoints at the rocket's target Space Map Location.",
    "ClearMemory" => "When set to 1, clears the counter memory (e.g. ExportCount). Will set itself back to 0 when actioned",
    "CollectableGoods" => "Gets the cost of fuel to return the rocket to your current world.",
    "Color" => "Whether driven by concerns for clarity, safety or simple aesthetics, Stationeers have access to a small rainbow of colors for their constructions. These are the color setting for devices, represented as an integer.

0: Blue
1: Grey
2: Green
3: Orange
4: Red
5: Yellow
6: White
7: Black
8: Brown
9: Khaki
10: Pink
11: Purple

It is an unwavering universal law that anything higher than 11 will be purple. The ODA is powerless to change this. Similarly, anything lower than 0 will be Blue.",
    "Combustion" => "The assess atmosphere is on fire. Returns 1 if atmosphere is on fire, 0 if not.",
    "CombustionInput" => "The assess atmosphere is on fire. Returns 1 if device's input network is on fire, 0 if not.",
    "CombustionInput2" => "The assess atmosphere is on fire. Returns 1 if device's Input2 network is on fire, 0 if not.",
    "CombustionLimiter" => "Retards the rate of combustion inside the machine (range: 0-100), with 0 being the slowest rate of combustion and 100 being the fastest",
    "CombustionOutput" => "The assess atmosphere is on fire. Returns 1 if device's Output network is on fire, 0 if not.",
    "CombustionOutput2" => "The assess atmosphere is on fire. Returns 1 if device's Output2 network is on fire, 0 if not.",
    "CompletionRatio" => "How complete the current production is for this device, between 0 and 1",
    "ContactTypeId" => "The type id of the contact.",
    "CurrentCode" => "The Space Map Address of the rockets current Space Map Location",
    "CurrentResearchPodType" => "",
    "Density" => "The density of the rocket's target site's mine-able deposit.",
    "DerivativeGain" => "The derivative gain of the PID controller. This value determines how much the controller responds to the rate of change of the error. A higher value can help dampen oscillations and improve stability, but may also lead to noise amplification.",
    "DestinationCode" => "The Space Map Address of the rockets target Space Map Location",
    "Discover" => "Progress status of Discovery scan at the rocket's target Space Map Location. Returns a clamped normalised value. If Discovery scan is not available returns -1.",
    "DistanceAu" => "The current distance to the celestial object, measured in astronomical units.",
    "DistanceKm" => "The current distance to the celestial object, measured in kilometers.",
    "DrillCondition" => "The current condition of the drill head in this devices drill slot. Expressed as a ratio between 0 and 1.",
    "DryMass" => "The Mass in kilograms of the rocket excluding fuel. The more massive the rocket the more fuel will be required to move to a new location in space.",
    "Eccentricity" => "A measure of how elliptical (oval) an orbit is. Ranges from 0 (a perfect circle) to 1 (a parabolic trajectory).",
    "ElevatorLevel" => "Level the elevator is currently at",
    "ElevatorSpeed" => "Current speed of the elevator",
    "EntityState" => "The current entity state, such as whether it is dead, unconscious or alive, expressed as a state integer.",
    "EnvironmentEfficiency" => "The Environment Efficiency reported by the machine, as a float between 0 and 1",
    "Error" => "1 if device is in error state, otherwise 0",
    "ExhaustVelocity" => "The velocity of the exhaust gas in m/s",
    "ExportCount" => "How many items exported since last ClearMemory",
    "ExportQuantity" => "Total quantity of items exported by the device",
    "ExportSlotHash" => "DEPRECATED",
    "ExportSlotOccupant" => "DEPRECATED",
    "Extended" => "Extended",
    "Filtration" => "The current state of the filtration system, for example Filtration = 1 for a Hardsuit sets filtration to On",
    "FlightControlRule" => "Flight control rule of rocket. None = 0, No AutoPilot. Normal = 1, Target Decent Apex of 60m. Alternate = 2, Velocity to High - Full throttle. Alternate2 = 3, Target an appropriate decent velocity as velocity is too low. FinalApproach = 4, Descend towards launch mount in a controlled manner.",
    "Flush" => "Set to 1 to activate the flush function on the device",
    "ForceWrite" => "Forces Logic Writer devices to rewrite value",
    "ForwardX" => "The direction the entity is facing expressed as a normalized vector",
    "ForwardY" => "The direction the entity is facing expressed as a normalized vector",
    "ForwardZ" => "The direction the entity is facing expressed as a normalized vector",
    "Fuel" => "Gets the cost of fuel to return the rocket to your current world.",
    "Harvest" => "Performs the harvesting action for any plant based machinery",
    "Horizontal" => "Horizontal setting of the device",
    "HorizontalRatio" => "Radio of horizontal setting for device",
    "Idle" => "Returns 1 if the device is currently idle, otherwise 0",
    "ImportCount" => "How many items imported since last ClearMemory",
    "ImportQuantity" => "Total quantity of items imported by the device",
    "ImportSlotHash" => "DEPRECATED",
    "ImportSlotOccupant" => "DEPRECATED",
    "Inclination" => "The tilt of an orbit's plane relative to the equatorial plane, measured in degrees. Defines the orbital plane's angle.",
    "Index" => "The current index for the device.",
    "IntegralGain" => "The integral gain of the PID controller. This value determines how much the controller responds to the accumulated error over time. A higher value can help eliminate steady-state errors but may also lead to oscillations or instability.",
    "InterrogationProgress" => "Progress of this sattellite dish's interrogation of its current target, as a ratio from 0-1",
    "LineNumber" => "The line number of current execution for an integrated circuit running on this device. While this number can be written, use with caution",
    "Lock" => "1 if device is locked, otherwise 0, can be set in most devices and prevents the user from access the values",
    "ManualResearchRequiredPod" => "Sets the pod type to search for a certain pod when breaking down a pods.",
    "Mass" => "The total Mass of the rocket in kilograms including fuel and cargo. The more massive the rocket the more fuel will be required to move to a new location in space.",
    "Maximum" => "Maximum setting of the device",
    "MineablesInQueue" => "Returns the amount of mineables AIMEe has queued up to mine.",
    "MineablesInVicinity" => "Returns the amount of potential mineables within an extended area around AIMEe.",
    "MinedQuantity" => "The total number of resources that have been mined at the rocket's target Space Map Site.",
    "Minimum" => "Minimum value for provided logic device.",
    "MinimumWattsToContact" => "Minimum required amount of watts from the dish hitting the target trader contact to start interrogating the contact",
    "Mode" => "Integer for mode state, different devices will have different mode states available to them",
    "NameHash" => "Provides the hash value for the name of the object as a 32 bit integer.",
    "NavPoints" => "The number of NavPoints at the rocket's target Space Map Location.",
    "NetworkFault" => "Attached network is experiencing a fault, such as a pipe burst or other failure.",
    "NextWeatherEventTime" => "Returns in seconds when the next weather event is inbound.",
    "None" => "No description",
    "On" => "The current state of the device, 0 for off, 1 for on",
    "Open" => "1 if device is open, otherwise 0",
    "OperationalTemperatureEfficiency" => "How the input pipe's temperature effects the machines efficiency",
    "OrbitPeriod" => "The time it takes for an object to complete one full orbit around another object, measured in days. Indicates the duration of the orbital cycle.",
    "Orientation" => "The orientation of the entity in degrees in a plane relative towards the north origin",
    "Output" => "The output operation for a sort handling device, such as a stacker or sorter, when in logic mode the device will only action one repetition when set zero or above and then back to -1 and await further instructions",
    "PassedMoles" => "The number of moles that passed through this device on the previous simulation tick",
    "Plant" => "Performs the planting action for any plant based machinery",
    "PlantEfficiency1" => "DEPRECATED",
    "PlantEfficiency2" => "DEPRECATED",
    "PlantEfficiency3" => "DEPRECATED",
    "PlantEfficiency4" => "DEPRECATED",
    "PlantGrowth1" => "DEPRECATED",
    "PlantGrowth2" => "DEPRECATED",
    "PlantGrowth3" => "DEPRECATED",
    "PlantGrowth4" => "DEPRECATED",
    "PlantHash1" => "DEPRECATED",
    "PlantHash2" => "DEPRECATED",
    "PlantHash3" => "DEPRECATED",
    "PlantHash4" => "DEPRECATED",
    "PlantHealth1" => "DEPRECATED",
    "PlantHealth2" => "DEPRECATED",
    "PlantHealth3" => "DEPRECATED",
    "PlantHealth4" => "DEPRECATED",
    "PositionX" => "The current position in X dimension in world coordinates",
    "PositionY" => "The current position in Y dimension in world coordinates",
    "PositionZ" => "The current position in Z dimension in world coordinates",
    "Power" => "Can be read to return if the device is correctly powered or not, set via the power system, return 1 if powered and 0 if not",
    "PowerActual" => "How much energy the device or network is actually using",
    "PowerGeneration" => "Returns how much power is being generated",
    "PowerPotential" => "How much energy the device or network potentially provides",
    "PowerRequired" => "Power requested from the device and/or network",
    "PrefabHash" => "The hash of the structure",
    "Pressure" => "The current pressure reading of the device",
    "PressureEfficiency" => "How the pressure of the input pipe and waste pipe effect the machines efficiency",
    "PressureExternal" => "Setting for external pressure safety, in KPa. Represents the target pressure of the external atmosphere.",
    "PressureInput" => "The current pressure reading of the device's Input Network",
    "PressureInput2" => "The current pressure reading of the device's Input2 Network",
    "PressureInternal" => "Setting for internal pressure safety, in KPa. Represents the target pressure of the atmosphere inside the connected pipe network.",
    "PressureOutput" => "The current pressure reading of the device's Output Network",
    "PressureOutput2" => "The current pressure reading of the device's Output2 Network",
    "PressureSetting" => "The current setting for the internal pressure of the object (e.g. the Hardsuit Air release), in KPa",
    "Progress" => "Progress of the rocket to the next node on the map expressed as a value between 0-1.",
    "ProportionalGain" => "The proportional gain of the PID controller. This value determines how aggressively the controller responds to the error between the setpoint and the process variable. A higher value results in a faster response but may lead to overshoot or instability.",
    "Quantity" => "Total quantity on the device",
    "Ratio" => "Context specific value depending on device, 0 to 1 based ratio",
    "RatioCarbonDioxide" => "The ratio of Carbon Dioxide in device atmosphere",
    "RatioCarbonDioxideInput" => "The ratio of Carbon Dioxide in device's input network",
    "RatioCarbonDioxideInput2" => "The ratio of Carbon Dioxide in device's Input2 network",
    "RatioCarbonDioxideOutput" => "The ratio of Carbon Dioxide in device's Output network",
    "RatioCarbonDioxideOutput2" => "The ratio of Carbon Dioxide in device's Output2 network",
    "RatioHydrogen" => "The ratio of Hydrogen in device's Atmopshere",
    "RatioLiquidCarbonDioxide" => "The ratio of Liquid Carbon Dioxide in device's Atmosphere",
    "RatioLiquidCarbonDioxideInput" => "The ratio of Liquid Carbon Dioxide in device's Input Atmosphere",
    "RatioLiquidCarbonDioxideInput2" => "The ratio of Liquid Carbon Dioxide in device's Input2 Atmosphere",
    "RatioLiquidCarbonDioxideOutput" => "The ratio of Liquid Carbon Dioxide in device's device's Output Atmosphere",
    "RatioLiquidCarbonDioxideOutput2" => "The ratio of Liquid Carbon Dioxide in device's Output2 Atmopshere",
    "RatioLiquidHydrogen" => "The ratio of Liquid Hydrogen in device's Atmopshere",
    "RatioLiquidNitrogen" => "The ratio of Liquid Nitrogen in device atmosphere",
    "RatioLiquidNitrogenInput" => "The ratio of Liquid Nitrogen in device's input network",
    "RatioLiquidNitrogenInput2" => "The ratio of Liquid Nitrogen in device's Input2 network",
    "RatioLiquidNitrogenOutput" => "The ratio of Liquid Nitrogen in device's Output network",
    "RatioLiquidNitrogenOutput2" => "The ratio of Liquid Nitrogen in device's Output2 network",
    "RatioLiquidNitrousOxide" => "The ratio of Liquid Nitrous Oxide in device's Atmosphere",
    "RatioLiquidNitrousOxideInput" => "The ratio of Liquid Nitrous Oxide in device's Input Atmosphere",
    "RatioLiquidNitrousOxideInput2" => "The ratio of Liquid Nitrous Oxide in device's Input2 Atmosphere",
    "RatioLiquidNitrousOxideOutput" => "The ratio of Liquid Nitrous Oxide in device's device's Output Atmosphere",
    "RatioLiquidNitrousOxideOutput2" => "The ratio of Liquid Nitrous Oxide in device's Output2 Atmopshere",
    "RatioLiquidOxygen" => "The ratio of Liquid Oxygen in device's Atmosphere",
    "RatioLiquidOxygenInput" => "The ratio of Liquid Oxygen in device's Input Atmosphere",
    "RatioLiquidOxygenInput2" => "The ratio of Liquid Oxygen in device's Input2 Atmosphere",
    "RatioLiquidOxygenOutput" => "The ratio of Liquid Oxygen in device's device's Output Atmosphere",
    "RatioLiquidOxygenOutput2" => "The ratio of Liquid Oxygen in device's Output2 Atmopshere",
    "RatioLiquidPollutant" => "The ratio of Liquid Pollutant in device's Atmosphere",
    "RatioLiquidPollutantInput" => "The ratio of Liquid Pollutant in device's Input Atmosphere",
    "RatioLiquidPollutantInput2" => "The ratio of Liquid Pollutant in device's Input2 Atmosphere",
    "RatioLiquidPollutantOutput" => "The ratio of Liquid Pollutant in device's device's Output Atmosphere",
    "RatioLiquidPollutantOutput2" => "The ratio of Liquid Pollutant in device's Output2 Atmopshere",
    "RatioLiquidVolatiles" => "The ratio of Liquid Volatiles in device's Atmosphere",
    "RatioLiquidVolatilesInput" => "The ratio of Liquid Volatiles in device's Input Atmosphere",
    "RatioLiquidVolatilesInput2" => "The ratio of Liquid Volatiles in device's Input2 Atmosphere",
    "RatioLiquidVolatilesOutput" => "The ratio of Liquid Volatiles in device's device's Output Atmosphere",
    "RatioLiquidVolatilesOutput2" => "The ratio of Liquid Volatiles in device's Output2 Atmopshere",
    "RatioNitrogen" => "The ratio of nitrogen in device atmosphere",
    "RatioNitrogenInput" => "The ratio of nitrogen in device's input network",
    "RatioNitrogenInput2" => "The ratio of nitrogen in device's Input2 network",
    "RatioNitrogenOutput" => "The ratio of nitrogen in device's Output network",
    "RatioNitrogenOutput2" => "The ratio of nitrogen in device's Output2 network",
    "RatioNitrousOxide" => "The ratio of Nitrous Oxide in device atmosphere",
    "RatioNitrousOxideInput" => "The ratio of Nitrous Oxide in device's input network",
    "RatioNitrousOxideInput2" => "The ratio of Nitrous Oxide in device's Input2 network",
    "RatioNitrousOxideOutput" => "The ratio of Nitrous Oxide in device's Output network",
    "RatioNitrousOxideOutput2" => "The ratio of Nitrous Oxide in device's Output2 network",
    "RatioOxygen" => "The ratio of oxygen in device atmosphere",
    "RatioOxygenInput" => "The ratio of oxygen in device's input network",
    "RatioOxygenInput2" => "The ratio of oxygen in device's Input2 network",
    "RatioOxygenOutput" => "The ratio of oxygen in device's Output network",
    "RatioOxygenOutput2" => "The ratio of oxygen in device's Output2 network",
    "RatioPollutant" => "The ratio of pollutant in device atmosphere",
    "RatioPollutantInput" => "The ratio of pollutant in device's input network",
    "RatioPollutantInput2" => "The ratio of pollutant in device's Input2 network",
    "RatioPollutantOutput" => "The ratio of pollutant in device's Output network",
    "RatioPollutantOutput2" => "The ratio of pollutant in device's Output2 network",
    "RatioPollutedWater" => "The ratio of polluted water in device atmosphere",
    "RatioSteam" => "The ratio of Steam in device's Atmosphere",
    "RatioSteamInput" => "The ratio of Steam in device's Input Atmosphere",
    "RatioSteamInput2" => "The ratio of Steam in device's Input2 Atmosphere",
    "RatioSteamOutput" => "The ratio of Steam in device's device's Output Atmosphere",
    "RatioSteamOutput2" => "The ratio of Steam in device's Output2 Atmopshere",
    "RatioVolatiles" => "The ratio of volatiles in device atmosphere",
    "RatioVolatilesInput" => "The ratio of volatiles in device's input network",
    "RatioVolatilesInput2" => "The ratio of volatiles in device's Input2 network",
    "RatioVolatilesOutput" => "The ratio of volatiles in device's Output network",
    "RatioVolatilesOutput2" => "The ratio of volatiles in device's Output2 network",
    "RatioWater" => "The ratio of water in device atmosphere",
    "RatioWaterInput" => "The ratio of water in device's input network",
    "RatioWaterInput2" => "The ratio of water in device's Input2 network",
    "RatioWaterOutput" => "The ratio of water in device's Output network",
    "RatioWaterOutput2" => "The ratio of water in device's Output2 network",
    "ReEntryAltitude" => "The altitude that the rocket will begin its decent to the pad. Must be between 25km and 120km",
    "Reagents" => "Total number of reagents recorded by the device",
    "RecipeHash" => "Current hash of the recipe the device is set to produce",
    "ReferenceId" => "Unique Reference Identifier for this object",
    "RequestHash" => "When set to the unique identifier, re quests an item of the provided type from the device",
    "RequiredPower" => "Idle operating power quantity, does not necessarily include extra demand power",
    "Reset" => "Resets the PID controller's internal state, clearing any accumulated error and resetting the output to zero. This is useful for starting fresh or recovering from an unstable state.",
    "ReturnFuelCost" => "Gets the fuel remaining in your rocket's fuel tank.",
    "Richness" => "The richness of the rocket's target site's mine-able deposit.",
    "Rpm" => "The number of revolutions per minute that the device's spinning mechanism is doing",
    "SemiMajorAxis" => "The longest radius of an elliptical orbit in astronomical units, measuring half the major axis. Determines the size of the orbit.",
    "Setpoint" => "The desired value that the PID controller aims to achieve. This is the target value for the process variable, and the controller will adjust its output to minimize the difference between the setpoint and the process variable.",
    "Setting" => "A variable setting that can be read or written, depending on the device",
    "SettingInput" => "The input setting for the device",
    "SettingOutput" => "The output setting for the device",
    "SignalID" => "Returns the contact ID of the strongest signal from this Satellite",
    "SignalStrength" => "Returns the degree offset of the strongest contact",
    "Sites" => "The number of Sites that have been discovered at the rockets target Space Map location.",
    "Size" => "The size of the rocket's target site's mine-able deposit.",
    "SizeX" => "Size on the X (right) axis of the object in largeGrids (a largeGrid is 2meters)",
    "SizeY" => "Size on the Y(Up) axis of the object in largeGrids (a largeGrid is 2meters)",
    "SizeZ" => "Size on the Z(Forward) axis of the object in largeGrids (a largeGrid is 2meters)",
    "SolarAngle" => "Solar angle of the device",
    "SolarIrradiance" => "The current solar irradiance.",
    "SoundAlert" => "Plays a sound alert on the devices speaker",
    "StackSize" => "Returns the stack size of the devices internal memory.",
    "Stress" => "Machines get stressed when working hard. When Stress reaches 100 the machine will automatically shut down",
    "Survey" => "Progress status of Survey scan at the rocket's target Space Map Location. Returns a normalised value where 100% surveyed is equal to 1. If Survey scan is not available returns -1.",
    "TargetPadIndex" => "The index of the trader landing pad on this devices data network that it will try to call a trader in to land",
    "TargetPrefabHash" => "The prefab",
    "TargetSlotIndex" => "The slot index that the target device that this device will try to interact with",
    "TargetX" => "The target position in X dimension in world coordinates",
    "TargetY" => "The target position in Y dimension in world coordinates",
    "TargetZ" => "The target position in Z dimension in world coordinates",
    "Temperature" => "The current temperature reading of the device",
    "TemperatureDifferentialEfficiency" => "How the difference between the input pipe and waste pipe temperatures effect the machines efficiency",
    "TemperatureExternal" => "The temperature of the outside of the device, usually the world atmosphere surrounding it",
    "TemperatureInput" => "The current temperature reading of the device's Input Network",
    "TemperatureInput2" => "The current temperature reading of the device's Input2 Network",
    "TemperatureOutput" => "The current temperature reading of the device's Output Network",
    "TemperatureOutput2" => "The current temperature reading of the device's Output2 Network",
    "TemperatureSetting" => "The current setting for the internal temperature of the object (e.g. the Hardsuit A/C)",
    "Throttle" => "Increases the rate at which the machine works (range: 0-100)",
    "Thrust" => "Total current thrust of all rocket engines on the rocket in Newtons.",
    "ThrustToWeight" => "Ratio of thrust to weight of rocket. Weight is effected by local body gravity. A rocket with a low thrust to weight will expend more fuel during launch and landing.",
    "Time" => "Time",
    "TimeToDestination" => "Estimated time in seconds until rocket arrives at target destination.",
    "TotalMoles" => "Returns the total moles of the device",
    "TotalMolesInput" => "Returns the total moles of the device's Input Network",
    "TotalMolesInput2" => "Returns the total moles of the device's Input2 Network",
    "TotalMolesOutput" => "Returns the total moles of the device's Output Network",
    "TotalMolesOutput2" => "Returns the total moles of the device's Output2 Network",
    "TotalQuantity" => "The estimated total quantity of resources available to mine at the rocket's target Space Map Site.",
    "TrueAnomaly" => "An angular parameter that defines the position of a body moving along a Keplerian orbit. It is the angle between the direction of periapsis and the current position of the body, as seen from the main focus of the ellipse (the point around which the object orbits).",
    "VelocityMagnitude" => "The current magnitude of the velocity vector",
    "VelocityRelativeX" => "The current velocity X relative to the forward vector of this",
    "VelocityRelativeY" => "The current velocity Y relative to the forward vector of this",
    "VelocityRelativeZ" => "The current velocity Z relative to the forward vector of this",
    "VelocityX" => "The world velocity of the entity in the X axis",
    "VelocityY" => "The world velocity of the entity in the Y axis",
    "VelocityZ" => "The world velocity of the entity in the Z axis",
    "Vertical" => "Vertical setting of the device",
    "VerticalRatio" => "Radio of vertical setting for device",
    "Volume" => "Returns the device atmosphere volume",
    "VolumeOfLiquid" => "The total volume of all liquids in Liters in the atmosphere",
    "WattsReachingContact" => "The amount of watts actually hitting the contact. This is effected by the power of the dish and how far off-axis the dish is from the contact vector",
    "Weight" => "Weight of Rocket in Newtons (Including fuel and cargo). Weight is effected by local body gravity.",
    "WorkingGasEfficiency" => "The Working Gas Efficiency reported by the machine, as a float between 0 and 1",
};

pub(crate) const SLOT_TYPE_DOCS: phf::Map<&'static str, &'static str> = phf_map! {
    "Charge" => "returns current energy charge the slot occupant is holding",
    "ChargeRatio" => "returns current energy charge the slot occupant is holding as a ratio between 0 and 1 of its maximum",
    "Class" => "returns integer representing the class of object",
    "Damage" => "returns the damage state of the item in the slot",
    "Efficiency" => "returns the growth efficiency of the plant in the slot",
    "FilterType" => "No description available",
    "Growth" => "returns the current growth state of the plant in the slot",
    "HarvestedHash" => "No description available",
    "Health" => "Returns the health of the plant in the slot",
    "LineNumber" => "The line number of current execution for an integrated circuit running on this device. While this number can be written, use with caution",
    "Lock" => "No description available",
    "Mature" => "returns 1 if the plant in this slot is mature, 0 when it isn't",
    "MaturityRatio" => "How far the plant is towards maturity represented as a fraction between 0 and 1, with 1 being mature and ready for harvest.",
    "MaxQuantity" => "returns the max stack size of the item in the slot",
    "Mode" => "No description available",
    "None" => "No description",
    "OccupantHash" => "returns the hash of the current occupant, the unique identifier of the thing",
    "Occupied" => "returns 0 when slot is not occupied, 1 when it is",
    "On" => "No description available",
    "Open" => "No description available",
    "PrefabHash" => "returns the hash of the structure in the slot",
    "Pressure" => "returns pressure of the slot occupants internal atmosphere",
    "PressureAir" => "returns pressure in the air tank of the jetpack in this slot",
    "PressureWaste" => "returns pressure in the waste tank of the jetpack in this slot",
    "Quantity" => "returns the current quantity, such as stack size, of the item in the slot",
    "ReferenceId" => "Unique Reference Identifier for this object",
    "Seeding" => "Whether a plant is seeding (ready to harvest seeds from). Returns 1 if seeding or 0 if not.",
    "SeedingRatio" => "How far the plant is towards seeding represented as a fraction between 0 and 1, with 1 being seeding and will supply seeds when harvested.",
    "SortingClass" => "No description available",
    "Temperature" => "returns temperature of the slot occupants internal atmosphere",
    "Volume" => "No description available",
};

pub(crate) const BATCH_MODE_DOCS: phf::Map<&'static str, &'static str> = phf_map! {
    "Average" => "Average of all read values",
    "Sum" => "All read values added together",
    "Minimum" => "Lowest of all read values",
    "Maximum" => "Highest of all read values",
};

include!(concat!(env!("OUT_DIR"), "/stationpedia.rs"));

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn matching_instructions() {
        for instruction in INSTRUCTIONS.keys() {
            println!("Is {instruction} in INSTRUCTION_DOCS?");
            assert!(INSTRUCTION_DOCS.contains_key(instruction));
        }
        for instruction in INSTRUCTION_DOCS.keys() {
            println!("Is {instruction} in INSTRUCTIONS?");
            assert!(INSTRUCTIONS.contains_key(instruction));
        }
    }

    #[test]
    fn matching_logic_types() {
        for logictype in LOGIC_TYPES.iter() {
            println!("Is {logictype} in LOGIC_TYPE_DOCS?");
            assert!(LOGIC_TYPE_DOCS.contains_key(logictype));
        }
        for logictype in LOGIC_TYPE_DOCS.keys() {
            println!("Is {logictype} in LOGIC_TYPES?");
            assert!(LOGIC_TYPES.contains(logictype));
        }
    }

    #[test]
    fn matching_slot_types() {
        for slottype in SLOT_LOGIC_TYPES.iter() {
            println!("Is {slottype} in SLOT_TYPE_DOCS?");
            assert!(SLOT_TYPE_DOCS.contains_key(slottype));
        }
        for slottype in SLOT_TYPE_DOCS.keys() {
            println!("Is {slottype} in SLOT_LOGIC_TYPES?");
            assert!(SLOT_LOGIC_TYPES.contains(slottype));
        }
    }
}
